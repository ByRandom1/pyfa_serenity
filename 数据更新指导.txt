环境配置
1、下载必须文件（https://github.com/pyfa-org/Pyfa、https://github.com/pyfa-org/Phobos、https://github.com/ntt/reverence）
2、安装Python2.7、Python3.7，注意勾选Add Path，注意选择自定义安装（为所有用户安装，更改路径）
3、更改Python2.7下的python.exe为python2.exe，更改Python3.7下的python.exe为python3.exe
4、执行pip换源：python2 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple和python3 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
4、安装reverence
5、安装EVE，并且选择下载完整客户端

！！！注意：如果effects不需要更新，则直接执行获取数据步骤，获得更新后的eve.db，并覆盖至运行目录即可！！！

获取数据
1、执行：python2 Phobos路径\run.py -e EVE路径 -s serenity -j JSON保存路径，期间缺少的依赖包全部执行指令：python2 -m pip install XXX，执行成功即在JSON保存文件夹下看到获取的json数据。
2、将JSON保存文件夹下的所有数据复制到pyfa源文件路径\staticdata下，并且根据原来staticdata中文件名将新数据中对应的文件加.0重命名。并且注意复制新数据中缺少的文件（\staticdata\phobos\traits.0.json）
3、执行：python3 -m pip install -r pyfa源文件路径\requirements.txt以安装pyfa运行依赖包，并执行：python3 pyfa源文件路径\db_update.py以生成eve.db

解决数据出错问题：做好数据备份
目前发现的问题有两个
1、由于无法获取traits.0.json（保存的是舰船属性描述），因此需要为新添加的舰船添加属性描述条目。（若没有新舰船则直接复制即可）
2、国服数据修改了部分欧服数据，导致pyfa不能正常读取数据库（报错）
解决方法：使用navicat编辑数据库
1、打开invtraits表，为新添加的舰船添加数据信息
2、打开新数据库和正常软件里的数据库，工具—数据同步，源选择新生成的，目标选择正常软件里的，下一步直到比较完成，去掉每个表中修改和删除的勾（只选择添加的，一般来说只会添加不会更改和减少），然后应用即可。（注意把两个数据库放到桌面，不然会是只读）

补充新effects
-> effects本质上是将两个或者多个相关影响的属性联系在一起，一般来说只会添加
1、查找新的effects以及与其关联的typeID：使用navicat打开正常软件里的数据库，并在连接右键-附加数据库，选择新数据库打开并设置数据库名为main_new。新建查询，SQL语句如下：
SELECT main_new.invtypes.typeID, main_new.invtypes.typeName, main_new.invtypes.typeName_zh, main_new.dgmeffects.effectID, main_new.dgmeffects.effectName
FROM main_new.dgmeffects, main_new.dgmtypeeffects, main_new.invtypes
LEFT JOIN main.dgmeffects ON main_new.dgmeffects.effectID = main.dgmeffects.effectID
WHERE main.dgmeffects.effectID IS NULL AND main_new.invtypes.typeID=main_new.dgmtypeeffects.typeID AND main_new.dgmtypeeffects.effectID=main_new.dgmeffects.effectID;
从而获得包含新的effects的（typeID，typeName，typeName_zh，effectID，effectName）的元组，即为需要补充的数据，可以选择导出为excel。
2、查找与新effects关联的typeID相关的attributes：使用navicat打开正常软件里的数据库，并在连接右键-附加数据库，选择新数据库打开并设置数据库名为main_new。新建查询，SQL语句如下：
SELECT DISTINCT main_new.invtypes.typeID, main_new.invtypes.typeName, main_new.invtypes.typeName_zh, main_new.dgmattribs.attributeID, main_new.dgmattribs.attributeName, main_new.dgmattribs.displayName_zh, main_new.dgmtypeattribs.value
FROM main_new.dgmeffects, main_new.dgmtypeeffects, main_new.invtypes, main_new.dgmattribs, main_new.dgmtypeattribs
LEFT JOIN main.dgmeffects ON main_new.dgmeffects.effectID = main.dgmeffects.effectID
WHERE main.dgmeffects.effectID IS NULL AND main_new.invtypes.typeID=main_new.dgmtypeeffects.typeID AND main_new.dgmtypeeffects.effectID=main_new.dgmeffects.effectID AND main_new.dgmtypeattribs.typeID=main_new.invtypes.typeID AND main_new.dgmtypeattribs.attributeID=main_new.dgmattribs.attributeID;
从而获得包含与新effects关联的typeID相关的（typeID，typeName，typeName_zh，attributeID，attributeName，displayName_zh，value）的元组，即为参考的属性，可以选择导出为excel。
3、打开eos\effects.py，在最后添加补充的effects，格式参考https://github.com/pyfa-org/Pyfa/wiki/Writing-Effects-in-Pyfa，参数值参考其他的effects。模版如下，(-)为修改的部分：
class Effect(effectID)(BaseEffect):
    """
    (effectName)

    Used by:
    (typeName)
    """

    runtime = ('early'/'normal'/'late') #一般不用写
    type = ('offline'/'passive'/'active'/'overheat'/'projected'/'gang')

    @staticmethod
    def handler(fit, ship, context, projectionRange, **kwargs):
        #(参考相似的effects填入函数及参数，可以多条)

获取图标
1、执行python2 pyfa源文件路径\scripts\icons_update.py -e EVE路径\SharedChache -s serenity -i JSON保存路径\staticdata\fsd_binary\iconids.0.json以获取对应的图标。

综上所述，发布与国服数据相关联的数据库需要修改的文件是：
1、staticdata：使用“获取数据”和“解决数据出错问题”两个部分的指导完成
2、eos\effects：使用“补充新effects“的指导完成
3、img\icons和img\renders：使用“获取图标”的指导完成

Windows exe生成
1、执行：python3 -m pip install PyInstaller以安装依赖包
3、执行：python3 pyfa源文件路径\scripts\complie_lang.py以生成pyfa客户端语言文件
4、执行：python3 -m PyInstaller --clean -y pyfa源文件路径\pyfa.spec以完成文件的打包，Windows下打包完成的可执行文件夹在dist/pyfa，将其复制到Program Files中即可。

Mac app生成
1、准备好在Windows能够成功完成exe文件生成的pyfa文件夹
2、安装Python3.7，执行：pip3 install PyInstaller和pip3 install -r pyfa路径\requirements.txt以安装依赖包。
3、执行：python3 -m PyInstaller --clean -y pyfa源文件路径\pyfa.spec以完成文件的打包，Mac下打包完成的可执行文件夹在dist/pyfa，将pyfa文件夹复制到pyfa.app/Contents/MacOS中，再将pyfa.app复制到Applications中。